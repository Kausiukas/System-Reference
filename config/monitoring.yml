# Background Agents System Monitoring Configuration
# =================================================

# System Information
system:
  name: "Background Agents Monitoring System"
  version: "1.0.0"
  environment: "${ENVIRONMENT:-development}"
  description: "PostgreSQL-based background agents with AI-powered monitoring"

# Database Configuration
database:
  type: "postgresql"
  host: "${POSTGRESQL_HOST:-localhost}"
  port: "${POSTGRESQL_PORT:-5432}"
      name: "${POSTGRESQL_DATABASE:-background_agents}"
  user: "${POSTGRESQL_USER:-postgres}"
  ssl_mode: "${POSTGRESQL_SSL_MODE:-prefer}"
  
  # Connection Pool Settings
  pool:
    size: "${POSTGRESQL_POOL_SIZE:-10}"
    timeout: "${POSTGRESQL_TIMEOUT:-30}"
    
  # Performance Settings
  performance:
    query_timeout: 30
    connection_timeout: 10
    statement_timeout: 60
    idle_timeout: 300

# Agent Configuration
agents:
  # Default settings for all agents
  defaults:
    heartbeat_interval: "${DEFAULT_HEARTBEAT_INTERVAL:-60}"
    max_retries: "${DEFAULT_MAX_RETRIES:-3}"
    timeout: "${DEFAULT_TIMEOUT:-30}"
    work_interval: 30
    
  # Individual agent configurations
  heartbeat_health_agent:
    enabled: "${HEARTBEAT_HEALTH_AGENT_ENABLED:-true}"
    heartbeat_interval: 30
    max_retries: 5
    alert_threshold: 120  # seconds
    
  performance_monitor:
    enabled: "${PERFORMANCE_MONITOR_ENABLED:-true}"
    collection_interval: 60
    metrics_retention_days: 30
    thresholds:
      cpu_usage: 80
      memory_usage: 85
      disk_usage: 90
      response_time: 5000
      
  langsmith_bridge:
    enabled: "${LANGSMITH_BRIDGE_ENABLED:-true}"
    api_key: "${LANGSMITH_API_KEY}"
    endpoint: "${LANGSMITH_ENDPOINT:-https://api.smith.langchain.com}"
    project: "${LANGSMITH_PROJECT:-background-agents-system}"
    tracing: "${LANGSMITH_TRACING:-true}"
    timeout: 30
    
  ai_help_agent:
    enabled: "${AI_HELP_AGENT_ENABLED:-true}"
    model: "${OPENAI_MODEL:-gpt-4}"
    temperature: 0.7
    max_tokens: 2000
    response_timeout: 30
    rag_enabled: true
    context_window: 8000

# Monitoring Configuration
monitoring:
  # Health Check Settings
  health_checks:
    enabled: true
    interval: "${HEALTH_CHECK_INTERVAL:-30}"
    timeout: 10
    endpoints:
      - name: "database"
        type: "postgresql"
        critical: true
      - name: "agents"
        type: "heartbeat"
        critical: true
      - name: "performance"
        type: "metrics"
        critical: false
        
  # Heartbeat Monitoring
  heartbeat:
    timeout: "${HEARTBEAT_TIMEOUT:-120}"
    missed_threshold: 3
    recovery_threshold: 2
    alert_on_miss: true
    
  # Performance Metrics
  performance:
    collection_interval: "${PERFORMANCE_METRICS_INTERVAL:-60}"
    retention_days: 30
    aggregation_intervals:
      - "1m"   # 1 minute
      - "5m"   # 5 minutes
      - "1h"   # 1 hour
      - "1d"   # 1 day
    
    # Metric definitions
    metrics:
      - name: "cpu_usage"
        unit: "percent"
        threshold: 80
        critical_threshold: 95
        
      - name: "memory_usage"
        unit: "percent"
        threshold: 85
        critical_threshold: 95
        
      - name: "disk_usage"
        unit: "percent"
        threshold: 90
        critical_threshold: 98
        
      - name: "response_time"
        unit: "milliseconds"
        threshold: 5000
        critical_threshold: 10000
        
      - name: "error_rate"
        unit: "percent"
        threshold: 5
        critical_threshold: 10
        
      - name: "connection_count"
        unit: "count"
        threshold: 15
        critical_threshold: 18

# Alerting Configuration
alerting:
  enabled: "${ALERT_EMAIL_ENABLED:-false}"
  
  # Email Settings
  email:
    enabled: "${ALERT_EMAIL_ENABLED:-false}"
    smtp_host: "${ALERT_EMAIL_SMTP_HOST:-smtp.gmail.com}"
    smtp_port: "${ALERT_EMAIL_SMTP_PORT:-587}"
    username: "${ALERT_EMAIL_USER}"
    password: "${ALERT_EMAIL_PASSWORD}"
    from_address: "${ALERT_EMAIL_USER}"
    to_addresses:
      - "${ALERT_EMAIL_TO:-admin@localhost}"
    use_tls: true
    
  # Alert Rules
  rules:
    - name: "agent_down"
      condition: "heartbeat_missed > 3"
      severity: "critical"
      message: "Agent {{agent_id}} has missed {{heartbeat_missed}} heartbeats"
      
    - name: "high_cpu"
      condition: "cpu_usage > 90"
      severity: "warning"
      message: "High CPU usage detected: {{cpu_usage}}%"
      
    - name: "high_memory"
      condition: "memory_usage > 90"
      severity: "warning"
      message: "High memory usage detected: {{memory_usage}}%"
      
    - name: "database_connection_error"
      condition: "database_health == false"
      severity: "critical"
      message: "Database connection failed"
      
    - name: "high_error_rate"
      condition: "error_rate > 10"
      severity: "critical"
      message: "High error rate detected: {{error_rate}}%"

# Logging Configuration
logging:
  level: "${LOG_LEVEL:-INFO}"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # Log Files
  files:
    system:
      path: "${LOGS_DIR:-logs}/system.log"
      max_size: "10MB"
      backup_count: 5
      
    agents:
      path: "${LOGS_DIR:-logs}/agents.log"
      max_size: "10MB"
      backup_count: 5
      
    performance:
      path: "${LOGS_DIR:-logs}/performance.log"
      max_size: "10MB"
      backup_count: 5
      
    errors:
      path: "${LOGS_DIR:-logs}/errors.log"
      max_size: "10MB"
      backup_count: 10
      
  # Log Rotation
  rotation:
    enabled: true
    when: "midnight"
    interval: 1
    backup_count: 30

# Dashboard Configuration
dashboard:
  enabled: true
  host: "0.0.0.0"
  port: 8501
  title: "Background Agents Monitoring Dashboard"
  
  # Auto-refresh settings
  auto_refresh:
    enabled: true
    interval: 30  # seconds
    
  # Dashboard sections
  sections:
    - name: "system_overview"
      enabled: true
      order: 1
      
    - name: "agent_status"
      enabled: true
      order: 2
      
    - name: "performance_metrics"
      enabled: true
      order: 3
      
    - name: "recent_events"
      enabled: true
      order: 4
      
    - name: "ai_help_system"
      enabled: true
      order: 5

# API Configuration
api:
  enabled: true
  host: "0.0.0.0"
  port: 8000
  cors_enabled: "${CORS_ENABLED:-true}"
  cors_origins:
    - "${CORS_ORIGINS:-http://localhost:3000,http://localhost:8501}"
    
  # Authentication
  auth:
    enabled: false
    api_key_header: "${API_KEY_HEADER:-X-API-Key}"
    
  # Rate Limiting
  rate_limiting:
    enabled: true
    requests_per_minute: 100
    
  # API Endpoints
  endpoints:
    health: "/health"
    agents: "/api/agents"
    metrics: "/api/metrics"
    events: "/api/events"
    help: "/api/help"

# Backup and Recovery
backup:
  enabled: "${BACKUP_ENABLED:-true}"
  
  # Database Backup
  database:
    enabled: true
    interval: "${BACKUP_INTERVAL:-daily}"
    retention_days: "${BACKUP_RETENTION_DAYS:-30}"
    location: "${BACKUP_LOCATION:-backups}"
    
    # Backup types
    types:
      - name: "full"
        schedule: "0 2 * * *"  # Daily at 2 AM
        
      - name: "incremental"
        schedule: "0 */6 * * *"  # Every 6 hours
        
  # Configuration Backup
  config:
    enabled: true
    location: "${BACKUP_LOCATION:-backups}/config"
    retention_days: 7

# Security Configuration
security:
  # Database Security
  database:
    ssl_required: false
    encrypt_connections: true
    
  # Application Security
  application:
    secret_key: "${SECRET_KEY}"
    session_timeout: 3600
    
  # Network Security
  network:
    allowed_hosts:
      - "localhost"
      - "127.0.0.1"
      - "0.0.0.0"

# Performance Optimization
performance:
  # Database Optimization
  database:
    connection_pool_size: 20
    query_cache_size: 100
    statement_cache_size: 50
    
  # Application Optimization
  application:
    max_workers: 4
    thread_pool_size: 10
    async_timeout: 30
    
  # Memory Management
  memory:
    max_memory_usage: "1GB"
    gc_threshold: 0.8

# Development Settings
development:
  enabled: "${DEV_MODE:-false}"
  
  # Mock Data
  mock_data:
    enabled: "${DEV_MOCK_DATA:-false}"
    agents_count: 5
    metrics_history_days: 7
    
  # Debug Settings
  debug:
    enabled: "${DEBUG:-false}"
    sql_logging: false
    performance_logging: true
    
  # Testing
  testing:
    enabled: "${TEST_MODE:-false}"
    test_database: "${POSTGRESQL_TEST_DB:-background_agents_test}"

# External Integrations
integrations:
  # Email Services
  email:
    enabled: "${EMAIL_SERVICE_ENABLED:-false}"
    
    gmail:
      enabled: false
      address: "${GMAIL_ADDRESS}"
      app_password: "${GMAIL_APP_PASSWORD}"
      
    outlook:
      enabled: false
      address: "${OUTLOOK_ADDRESS}"
      password: "${OUTLOOK_PASSWORD}"
      
  # Vector Database
  vector_db:
    enabled: "${VECTOR_DB_ENABLED:-false}"
    type: "chroma"
    host: "${CHROMA_HOST:-localhost}"
    port: "${CHROMA_PORT:-8000}"
    collection_name: "background_agents_docs"
    
  # External Monitoring
  external_monitoring:
    enabled: false
    
    # Prometheus
    prometheus:
      enabled: false
      port: 9090
      metrics_path: "/metrics"
      
    # Grafana
    grafana:
      enabled: false
      host: "localhost"
      port: 3000

# Maintenance Configuration
maintenance:
  # Scheduled Maintenance
  scheduled:
    enabled: true
    
    # Database Maintenance
    database_cleanup:
      schedule: "0 1 * * 0"  # Weekly on Sunday at 1 AM
      retention_days: 30
      
    log_rotation:
      schedule: "0 0 * * *"  # Daily at midnight
      
    performance_analysis:
      schedule: "0 3 * * 1"  # Weekly on Monday at 3 AM
      
  # Automatic Cleanup
  cleanup:
    enabled: true
    
    # Old Data Cleanup
    old_data:
      heartbeats_retention_days: 30
      metrics_retention_days: 90
      events_retention_days: 90
      help_requests_retention_days: 180

# Feature Flags
features:
  ai_help_system: true
  performance_monitoring: true
  real_time_alerts: true
  dashboard_auto_refresh: true
  api_endpoints: true
  backup_system: true
  health_checks: true
  log_rotation: true 